
######## Snakemake header ########
import sys; sys.path.extend(["/home/pengjia/miniconda3/envs/smk/lib/python3.6/site-packages", "/home/pengjia/ProjectSnake/snake-wrappers/bio/loadfq"]); import pickle; snakemake = pickle.loads(b'\x80\x03csnakemake.script\nSnakemake\nq\x00)\x81q\x01}q\x02(X\x05\x00\x00\x00inputq\x03csnakemake.io\nInputFiles\nq\x04)\x81q\x05(X<\x00\x00\x00/home/DATA/NA12878/pipelineTest/fastq/HG001_1000G_chr20_1.fqq\x06X<\x00\x00\x00/home/DATA/NA12878/pipelineTest/fastq/HG001_1000G_chr20_2.fqq\x07e}q\x08(X\x06\x00\x00\x00_namesq\t}q\n(X\x02\x00\x00\x00R1q\x0bK\x00N\x86q\x0cX\x02\x00\x00\x00R2q\rK\x01N\x86q\x0euh\x0bh\x06h\rh\x07ubX\x06\x00\x00\x00outputq\x0fcsnakemake.io\nOutputFiles\nq\x10)\x81q\x11(X8\x00\x00\x00../../ngs_test_data/rawdata/HG001/N1/HG001_N1_L1_1.fq.gzq\x12X8\x00\x00\x00../../ngs_test_data/rawdata/HG001/N1/HG001_N1_L1_2.fq.gzq\x13e}q\x14(h\t}q\x15(h\x0bK\x00N\x86q\x16h\rK\x01N\x86q\x17uh\x0bh\x12h\rh\x13ubX\x06\x00\x00\x00paramsq\x18csnakemake.io\nParams\nq\x19)\x81q\x1aX&\x00\x00\x00/home/pengjia/miniconda3/envs/ngs/bin/q\x1ba}q\x1c(h\t}q\x1dX\x04\x00\x00\x00pathq\x1eK\x00N\x86q\x1fsh\x1eh\x1bubX\t\x00\x00\x00wildcardsq csnakemake.io\nWildcards\nq!)\x81q"(X\x05\x00\x00\x00HG001q#X\x02\x00\x00\x00N1q$X\x02\x00\x00\x00L1q%e}q&(h\t}q\'(X\x04\x00\x00\x00caseq(K\x00N\x86q)X\x06\x00\x00\x00sampleq*K\x01N\x86q+X\x04\x00\x00\x00unitq,K\x02N\x86q-uX\x04\x00\x00\x00caseq.h#X\x06\x00\x00\x00sampleq/h$X\x04\x00\x00\x00unitq0h%ubX\x07\x00\x00\x00threadsq1K\x04X\t\x00\x00\x00resourcesq2csnakemake.io\nResources\nq3)\x81q4(K\x04K\x01e}q5(h\t}q6(X\x06\x00\x00\x00_coresq7K\x00N\x86q8X\x06\x00\x00\x00_nodesq9K\x01N\x86q:uh7K\x04h9K\x01ubX\x03\x00\x00\x00logq;csnakemake.io\nLog\nq<)\x81q=XC\x00\x00\x00../../ngs_test_log/qc/loadRawdata/HG001/N1/HG001_N1_L1_loaddata.logq>a}q?h\t}q@sbX\x06\x00\x00\x00configqA}qB(X\x08\x00\x00\x00caseinfoqCX\x11\x00\x00\x00conf/caseinfo.csvqDX\n\x00\x00\x00pairedinfoqEX\x0f\x00\x00\x00conf/paired.csvqFX\t\x00\x00\x00path_dataqGX\x14\x00\x00\x00../../ngs_test_data/qHX\x08\x00\x00\x00path_logqIX\x13\x00\x00\x00../../ngs_test_log/qJX\x07\x00\x00\x00path_bmqKX\x11\x00\x00\x00../../ngs_test_bmqLX\x07\x00\x00\x00wrapperqMX3\x00\x00\x00file:/home/pengjia/ProjectSnake/snake-wrappers/bio/qNX\x07\x00\x00\x00mainEnvqOX*\x00\x00\x00/home/pengjia/miniconda3/envs/PQsnake/bin/qPX\x05\x00\x00\x00qcEnvqQX(\x00\x00\x00/home/pengjia/miniconda3/envs/ngsqc/bin/qRX\x03\x00\x00\x00refqS}qT(X\x04\x00\x00\x00nameqUX\x06\x00\x00\x00GRCh38qVX\x06\x00\x00\x00genomeqWXv\x00\x00\x00/home/DATA/REFGENOMEDB/human/GRCh38_full_analysis_set_plus_decoy_hla/genome/GRCh38_full_analysis_set_plus_decoy_hla.faqXX\x05\x00\x00\x00dbsnpqYXe\x00\x00\x00/home/DATA/REFGENOMEDB/human/GRCh38_full_analysis_set_plus_decoy_hla/variantsDB/dbsnp_146.hg38.vcf.gzqZX\x07\x00\x00\x001KGomniq[Xi\x00\x00\x00/home/DATA/REFGENOMEDB/human/GRCh38_full_analysis_set_plus_decoy_hla/variantsDB/1000G_omni2.5.hg38.vcf.gzq\\X\x08\x00\x00\x001KGp1snpq]X}\x00\x00\x00/home/DATA/REFGENOMEDB/human/GRCh38_full_analysis_set_plus_decoy_hla/variantsDB/1000G_phase1.snps.high_confidence.hg38.vcf.gzq^X\x06\x00\x00\x00hapmapq_Xf\x00\x00\x00/home/DATA/REFGENOMEDB/human/GRCh38_full_analysis_set_plus_decoy_hla/variantsDB/hapmap_3.3.hg38.vcf.gzq`X\x08\x00\x00\x00mills1KGqaX\x80\x00\x00\x00/home/DATA/REFGENOMEDB/human/GRCh38_full_analysis_set_plus_decoy_hla/variantsDB/Mills_and_1000G_gold_standard.indels.hg38.vcf.gzqbX\n\x00\x00\x00germMutuctqcXg\x00\x00\x00/home/DATA/REFGENOMEDB/human/GRCh38_full_analysis_set_plus_decoy_hla/Mutect2/af-only-gnomad.hg38.vcf.gzqduX\x07\x00\x00\x00threadsqe}qf(X\x04\x00\x00\x00pigzqgK\x04X\x06\x00\x00\x00fastqcqhK\x04X\x05\x00\x00\x00fastpqiK\x04X\x04\x00\x00\x00trimqjK\x01X\x07\x00\x00\x00multiqcqkK\x01X\x03\x00\x00\x00bwaqlK\x08X\x08\x00\x00\x00samtoolsqmK\x08X\t\x00\x00\x00biobambamqn}qoX\x05\x00\x00\x00rmDupqpK\x04sX\x06\x00\x00\x00picardqq}qrX\x05\x00\x00\x00rmDupqsK\x01sX\x04\x00\x00\x00gatkqt}qu(X\n\x00\x00\x00preReAlignqvK\x04X\x0c\x00\x00\x00applyReAlignqwK\x01X\x07\x00\x00\x00preBQSRqxK\x01X\t\x00\x00\x00applyBQSRqyK\x01X\t\x00\x00\x00leftAlignqzK\x01X\x07\x00\x00\x00fixMateq{K\x01uX\t\x00\x00\x00msisensorq|K\x02uX\t\x00\x00\x00filteringq}}q~(X\x04\x00\x00\x00vqsrq\x7f\x89X\x04\x00\x00\x00hardq\x80}q\x81(X\x04\x00\x00\x00snvsq\x82XP\x00\x00\x00QD < 2.0 || FS > 60.0 || MQ < 40.0 || MQRankSum < -12.5 || ReadPosRankSum < -8.0q\x83X\x06\x00\x00\x00indelsq\x84X0\x00\x00\x00QD < 2.0 || FS > 200.0 || ReadPosRankSum < -20.0q\x85uuX\n\x00\x00\x00processingq\x86}q\x87X\x11\x00\x00\x00remove-duplicatesq\x88\x88sX\x06\x00\x00\x00paramsq\x89}q\x8a(X\x04\x00\x00\x00gatkq\x8b}q\x8c(X\x0f\x00\x00\x00HaplotypeCallerq\x8dX\x00\x00\x00\x00q\x8eX\x10\x00\x00\x00BaseRecalibratorq\x8fh\x8eX\r\x00\x00\x00GenotypeGVCFsq\x90h\x8eX\x13\x00\x00\x00VariantRecalibratorq\x91h\x8euX\x06\x00\x00\x00picardq\x92}q\x93X\x0e\x00\x00\x00MarkDuplicatesq\x94X\x16\x00\x00\x00REMOVE_DUPLICATES=trueq\x95sX\x0b\x00\x00\x00trimmomaticq\x96}q\x97(X\x02\x00\x00\x00peq\x98}q\x99X\x07\x00\x00\x00trimmerq\x9a]q\x9b(X\t\x00\x00\x00LEADING:3q\x9cX\n\x00\x00\x00TRAILING:3q\x9dX\x12\x00\x00\x00SLIDINGWINDOW:4:15q\x9eX\t\x00\x00\x00MINLEN:36q\x9fesX\x02\x00\x00\x00seq\xa0}q\xa1X\x07\x00\x00\x00trimmerq\xa2]q\xa3(X\t\x00\x00\x00LEADING:3q\xa4X\n\x00\x00\x00TRAILING:3q\xa5X\x12\x00\x00\x00SLIDINGWINDOW:4:15q\xa6X\t\x00\x00\x00MINLEN:36q\xa7esuuuX\x04\x00\x00\x00ruleq\xa8X\x0b\x00\x00\x00loadrawDataq\xa9X\x0f\x00\x00\x00bench_iterationq\xaaNX\t\x00\x00\x00scriptdirq\xabX4\x00\x00\x00/home/pengjia/ProjectSnake/snake-wrappers/bio/loadfqq\xacub.'); from snakemake.logging import logger; logger.printshellcmds = False; __real_file__ = __file__; __file__ = '/home/pengjia/ProjectSnake/snake-wrappers/bio/loadfq/wrapper.py';
######## Original script #########
__author__ = "Peng Jia"
__copyright__ = "Copyright 2019, Peng Jia"
__email__ = "pengjia@stu.xjtu.edu.cn, pengjia1110@163.com, pengjia1110@gmail.com "
__license__ = "GPL-3.0"

from snakemake.shell import shell
software_path=snakemake.params.path
software_path= software_path if software_path[-1]=="/" else software_path+"/"
log = snakemake.log_fmt_shell(stdout=True, stderr=True)
R1=snakemake.input.R1
R2=snakemake.input.R2
if R1[-2:]=="gz":
    shell("(ln -sr {R1} {snakemake.output.R1}) {log} " )
else:
    shell("({software_path}pigz -p {snakemake.threads} -c {R1} > {snakemake.output.R1}) {log} ")

if R2[-2:]=="gz":
    shell("(ln -sr {R2} {snakemake.output.R2}) {log} " )
else:
    shell("({software_path}pigz -p {snakemake.threads} -c {R2} > {snakemake.output.R2}) {log} ")

